// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240614125308_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Additional_Service", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Additional_Service");
                });

            modelBuilder.Entity("Data.Booking", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("StatusID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("StatusID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Data.Booking_Details", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("BookingID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Chek_in_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date_of_change")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Eviction_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PaymentID")
                        .HasColumnType("bigint");

                    b.Property<bool>("Prepayment")
                        .HasColumnType("boolean");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("UserID");

                    b.ToTable("Booking_Details");
                });

            modelBuilder.Entity("Data.Booking_DetailsAdditional_Service", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("Additional_ServiceID")
                        .HasColumnType("bigint");

                    b.Property<long>("Booking_DetailsID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("Additional_ServiceID");

                    b.HasIndex("Booking_DetailsID");

                    b.ToTable("Booking_DetailsAdditional_Service");
                });

            modelBuilder.Entity("Data.Booking_DetailsMain_Service", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("Booking_DetailsID")
                        .HasColumnType("bigint");

                    b.Property<long>("Main_ServiceID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("Booking_DetailsID");

                    b.HasIndex("Main_ServiceID");

                    b.ToTable("Booking_DetailsMain_Service");
                });

            modelBuilder.Entity("Data.Main_Service", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Main_Service");
                });

            modelBuilder.Entity("Data.Payment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("Payment_Info")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Data.Room", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("BookingRoomID")
                        .HasColumnType("bigint");

                    b.Property<string>("Room_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("BookingRoomID")
                        .IsUnique();

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Data.Status", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("Status_Info")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Data.Booking", b =>
                {
                    b.HasOne("Data.Status", "Status")
                        .WithMany("BookingStatus")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Data.Booking_Details", b =>
                {
                    b.HasOne("Data.Booking", "Booking")
                        .WithMany("Booking_DetailsBooking")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Payment", "Payment")
                        .WithMany("Booking_DetailsPay")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.User", "User")
                        .WithMany("Booking_DetailsUser")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Booking_DetailsAdditional_Service", b =>
                {
                    b.HasOne("Data.Additional_Service", "Additional_Service")
                        .WithMany("Booking_DetailsAdditional_ServiceList")
                        .HasForeignKey("Additional_ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Booking_Details", "Booking_Details")
                        .WithMany("Booking_DetailsAdditional_ServiceList")
                        .HasForeignKey("Booking_DetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Additional_Service");

                    b.Navigation("Booking_Details");
                });

            modelBuilder.Entity("Data.Booking_DetailsMain_Service", b =>
                {
                    b.HasOne("Data.Booking_Details", "Booking_Details")
                        .WithMany("Booking_DetailsMain_ServiceList")
                        .HasForeignKey("Booking_DetailsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Main_Service", "Main_Service")
                        .WithMany("Booking_DetailsMain_ServiceList")
                        .HasForeignKey("Main_ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking_Details");

                    b.Navigation("Main_Service");
                });

            modelBuilder.Entity("Data.Room", b =>
                {
                    b.HasOne("Data.Booking", "Booking")
                        .WithOne("Room")
                        .HasForeignKey("Data.Room", "BookingRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Data.Additional_Service", b =>
                {
                    b.Navigation("Booking_DetailsAdditional_ServiceList");
                });

            modelBuilder.Entity("Data.Booking", b =>
                {
                    b.Navigation("Booking_DetailsBooking");

                    b.Navigation("Room")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Booking_Details", b =>
                {
                    b.Navigation("Booking_DetailsAdditional_ServiceList");

                    b.Navigation("Booking_DetailsMain_ServiceList");
                });

            modelBuilder.Entity("Data.Main_Service", b =>
                {
                    b.Navigation("Booking_DetailsMain_ServiceList");
                });

            modelBuilder.Entity("Data.Payment", b =>
                {
                    b.Navigation("Booking_DetailsPay");
                });

            modelBuilder.Entity("Data.Status", b =>
                {
                    b.Navigation("BookingStatus");
                });

            modelBuilder.Entity("Data.User", b =>
                {
                    b.Navigation("Booking_DetailsUser");
                });
#pragma warning restore 612, 618
        }
    }
}
